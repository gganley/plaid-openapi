/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.5.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// ExternalPaymentSchedule The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
type ExternalPaymentSchedule struct {
	// The frequency interval of the payment. Valid values are `\"WEEKLY\"` or `\"MONTHLY\"`.
	Interval string `json:"interval"`
	// The day of the interval on which to schedule the payment.  If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).  If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
	IntervalExecutionDay float32 `json:"interval_execution_day"`
	// A date in ISO 8601 format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
	StartDate string `json:"start_date"`
	// A date in ISO 8601 format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`.  If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
	EndDate              *string `json:"end_date,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExternalPaymentSchedule ExternalPaymentSchedule

// NewExternalPaymentSchedule instantiates a new ExternalPaymentSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalPaymentSchedule(interval string, intervalExecutionDay float32, startDate string) *ExternalPaymentSchedule {
	this := ExternalPaymentSchedule{}
	this.Interval = interval
	this.IntervalExecutionDay = intervalExecutionDay
	this.StartDate = startDate
	return &this
}

// NewExternalPaymentScheduleWithDefaults instantiates a new ExternalPaymentSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalPaymentScheduleWithDefaults() *ExternalPaymentSchedule {
	this := ExternalPaymentSchedule{}
	return &this
}

// GetInterval returns the Interval field value
func (o *ExternalPaymentSchedule) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *ExternalPaymentSchedule) GetIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *ExternalPaymentSchedule) SetInterval(v string) {
	o.Interval = v
}

// GetIntervalExecutionDay returns the IntervalExecutionDay field value
func (o *ExternalPaymentSchedule) GetIntervalExecutionDay() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.IntervalExecutionDay
}

// GetIntervalExecutionDayOk returns a tuple with the IntervalExecutionDay field value
// and a boolean to check if the value has been set.
func (o *ExternalPaymentSchedule) GetIntervalExecutionDayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntervalExecutionDay, true
}

// SetIntervalExecutionDay sets field value
func (o *ExternalPaymentSchedule) SetIntervalExecutionDay(v float32) {
	o.IntervalExecutionDay = v
}

// GetStartDate returns the StartDate field value
func (o *ExternalPaymentSchedule) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *ExternalPaymentSchedule) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *ExternalPaymentSchedule) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ExternalPaymentSchedule) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalPaymentSchedule) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ExternalPaymentSchedule) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ExternalPaymentSchedule) SetEndDate(v string) {
	o.EndDate = &v
}

func (o ExternalPaymentSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["interval"] = o.Interval
	}
	if true {
		toSerialize["interval_execution_day"] = o.IntervalExecutionDay
	}
	if true {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ExternalPaymentSchedule) UnmarshalJSON(bytes []byte) (err error) {
	varExternalPaymentSchedule := _ExternalPaymentSchedule{}

	if err = json.Unmarshal(bytes, &varExternalPaymentSchedule); err == nil {
		*o = ExternalPaymentSchedule(varExternalPaymentSchedule)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "interval")
		delete(additionalProperties, "interval_execution_day")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "end_date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExternalPaymentSchedule struct {
	value *ExternalPaymentSchedule
	isSet bool
}

func (v NullableExternalPaymentSchedule) Get() *ExternalPaymentSchedule {
	return v.value
}

func (v *NullableExternalPaymentSchedule) Set(val *ExternalPaymentSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalPaymentSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalPaymentSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalPaymentSchedule(val *ExternalPaymentSchedule) *NullableExternalPaymentSchedule {
	return &NullableExternalPaymentSchedule{value: val, isSet: true}
}

func (v NullableExternalPaymentSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalPaymentSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

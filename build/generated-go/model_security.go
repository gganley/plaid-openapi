/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.5.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// Security Contains details about a security
type Security struct {
	// A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive.
	SecurityId string `json:"security_id"`
	// 12-character ISIN, a globally unique securities identifier.
	Isin NullableString `json:"isin,omitempty"`
	// 9-character CUSIP, an identifier assigned to North American securities.
	Cusip NullableString `json:"cusip,omitempty"`
	// 7-character SEDOL, an identifier assigned to securities in the UK.
	Sedol NullableString `json:"sedol,omitempty"`
	// An identifier given to the security by the institution
	InstitutionSecurityId NullableString `json:"institution_security_id,omitempty"`
	// If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs.
	InstitutionId NullableString `json:"institution_id,omitempty"`
	// In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security.
	ProxySecurityId NullableString `json:"proxy_security_id,omitempty"`
	// A descriptive name for the security, suitable for display.
	Name NullableString `json:"name,omitempty"`
	// The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.
	TickerSymbol NullableString `json:"ticker_symbol,omitempty"`
	// Indicates that a security is a highly liquid asset and can be treated like cash.
	IsCashEquivalent *bool `json:"is_cash_equivalent,omitempty"`
	// The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables.  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors.  `other`: Unknown or other investment types
	Type string `json:"type"`
	// Price of the security at the close of the previous trading session. `null` for non-public securities.
	ClosePrice NullableFloat32 `json:"close_price,omitempty"`
	// Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
	ClosePriceAsOf NullableString `json:"close_price_as_of,omitempty"`
	// The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`.
	IsoCurrencyCode NullableString `json:"iso_currency_code,omitempty"`
	// The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
	UnofficialCurrencyCode NullableString `json:"unofficial_currency_code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Security Security

// NewSecurity instantiates a new Security object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurity(securityId string, type_ string, ) *Security {
	this := Security{}
	this.SecurityId = securityId
	this.Type = type_
	return &this
}

// NewSecurityWithDefaults instantiates a new Security object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityWithDefaults() *Security {
	this := Security{}
	return &this
}

// GetSecurityId returns the SecurityId field value
func (o *Security) GetSecurityId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SecurityId
}

// GetSecurityIdOk returns a tuple with the SecurityId field value
// and a boolean to check if the value has been set.
func (o *Security) GetSecurityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SecurityId, true
}

// SetSecurityId sets field value
func (o *Security) SetSecurityId(v string) {
	o.SecurityId = v
}

// GetIsin returns the Isin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetIsin() string {
	if o == nil || o.Isin.Get() == nil {
		var ret string
		return ret
	}
	return *o.Isin.Get()
}

// GetIsinOk returns a tuple with the Isin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetIsinOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Isin.Get(), o.Isin.IsSet()
}

// HasIsin returns a boolean if a field has been set.
func (o *Security) HasIsin() bool {
	if o != nil && o.Isin.IsSet() {
		return true
	}

	return false
}

// SetIsin gets a reference to the given NullableString and assigns it to the Isin field.
func (o *Security) SetIsin(v string) {
	o.Isin.Set(&v)
}
// SetIsinNil sets the value for Isin to be an explicit nil
func (o *Security) SetIsinNil() {
	o.Isin.Set(nil)
}

// UnsetIsin ensures that no value is present for Isin, not even an explicit nil
func (o *Security) UnsetIsin() {
	o.Isin.Unset()
}

// GetCusip returns the Cusip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetCusip() string {
	if o == nil || o.Cusip.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cusip.Get()
}

// GetCusipOk returns a tuple with the Cusip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetCusipOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cusip.Get(), o.Cusip.IsSet()
}

// HasCusip returns a boolean if a field has been set.
func (o *Security) HasCusip() bool {
	if o != nil && o.Cusip.IsSet() {
		return true
	}

	return false
}

// SetCusip gets a reference to the given NullableString and assigns it to the Cusip field.
func (o *Security) SetCusip(v string) {
	o.Cusip.Set(&v)
}
// SetCusipNil sets the value for Cusip to be an explicit nil
func (o *Security) SetCusipNil() {
	o.Cusip.Set(nil)
}

// UnsetCusip ensures that no value is present for Cusip, not even an explicit nil
func (o *Security) UnsetCusip() {
	o.Cusip.Unset()
}

// GetSedol returns the Sedol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetSedol() string {
	if o == nil || o.Sedol.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sedol.Get()
}

// GetSedolOk returns a tuple with the Sedol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetSedolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sedol.Get(), o.Sedol.IsSet()
}

// HasSedol returns a boolean if a field has been set.
func (o *Security) HasSedol() bool {
	if o != nil && o.Sedol.IsSet() {
		return true
	}

	return false
}

// SetSedol gets a reference to the given NullableString and assigns it to the Sedol field.
func (o *Security) SetSedol(v string) {
	o.Sedol.Set(&v)
}
// SetSedolNil sets the value for Sedol to be an explicit nil
func (o *Security) SetSedolNil() {
	o.Sedol.Set(nil)
}

// UnsetSedol ensures that no value is present for Sedol, not even an explicit nil
func (o *Security) UnsetSedol() {
	o.Sedol.Unset()
}

// GetInstitutionSecurityId returns the InstitutionSecurityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetInstitutionSecurityId() string {
	if o == nil || o.InstitutionSecurityId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstitutionSecurityId.Get()
}

// GetInstitutionSecurityIdOk returns a tuple with the InstitutionSecurityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetInstitutionSecurityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstitutionSecurityId.Get(), o.InstitutionSecurityId.IsSet()
}

// HasInstitutionSecurityId returns a boolean if a field has been set.
func (o *Security) HasInstitutionSecurityId() bool {
	if o != nil && o.InstitutionSecurityId.IsSet() {
		return true
	}

	return false
}

// SetInstitutionSecurityId gets a reference to the given NullableString and assigns it to the InstitutionSecurityId field.
func (o *Security) SetInstitutionSecurityId(v string) {
	o.InstitutionSecurityId.Set(&v)
}
// SetInstitutionSecurityIdNil sets the value for InstitutionSecurityId to be an explicit nil
func (o *Security) SetInstitutionSecurityIdNil() {
	o.InstitutionSecurityId.Set(nil)
}

// UnsetInstitutionSecurityId ensures that no value is present for InstitutionSecurityId, not even an explicit nil
func (o *Security) UnsetInstitutionSecurityId() {
	o.InstitutionSecurityId.Unset()
}

// GetInstitutionId returns the InstitutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetInstitutionId() string {
	if o == nil || o.InstitutionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstitutionId.Get()
}

// GetInstitutionIdOk returns a tuple with the InstitutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetInstitutionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstitutionId.Get(), o.InstitutionId.IsSet()
}

// HasInstitutionId returns a boolean if a field has been set.
func (o *Security) HasInstitutionId() bool {
	if o != nil && o.InstitutionId.IsSet() {
		return true
	}

	return false
}

// SetInstitutionId gets a reference to the given NullableString and assigns it to the InstitutionId field.
func (o *Security) SetInstitutionId(v string) {
	o.InstitutionId.Set(&v)
}
// SetInstitutionIdNil sets the value for InstitutionId to be an explicit nil
func (o *Security) SetInstitutionIdNil() {
	o.InstitutionId.Set(nil)
}

// UnsetInstitutionId ensures that no value is present for InstitutionId, not even an explicit nil
func (o *Security) UnsetInstitutionId() {
	o.InstitutionId.Unset()
}

// GetProxySecurityId returns the ProxySecurityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetProxySecurityId() string {
	if o == nil || o.ProxySecurityId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProxySecurityId.Get()
}

// GetProxySecurityIdOk returns a tuple with the ProxySecurityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetProxySecurityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProxySecurityId.Get(), o.ProxySecurityId.IsSet()
}

// HasProxySecurityId returns a boolean if a field has been set.
func (o *Security) HasProxySecurityId() bool {
	if o != nil && o.ProxySecurityId.IsSet() {
		return true
	}

	return false
}

// SetProxySecurityId gets a reference to the given NullableString and assigns it to the ProxySecurityId field.
func (o *Security) SetProxySecurityId(v string) {
	o.ProxySecurityId.Set(&v)
}
// SetProxySecurityIdNil sets the value for ProxySecurityId to be an explicit nil
func (o *Security) SetProxySecurityIdNil() {
	o.ProxySecurityId.Set(nil)
}

// UnsetProxySecurityId ensures that no value is present for ProxySecurityId, not even an explicit nil
func (o *Security) UnsetProxySecurityId() {
	o.ProxySecurityId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Security) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Security) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Security) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Security) UnsetName() {
	o.Name.Unset()
}

// GetTickerSymbol returns the TickerSymbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetTickerSymbol() string {
	if o == nil || o.TickerSymbol.Get() == nil {
		var ret string
		return ret
	}
	return *o.TickerSymbol.Get()
}

// GetTickerSymbolOk returns a tuple with the TickerSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetTickerSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TickerSymbol.Get(), o.TickerSymbol.IsSet()
}

// HasTickerSymbol returns a boolean if a field has been set.
func (o *Security) HasTickerSymbol() bool {
	if o != nil && o.TickerSymbol.IsSet() {
		return true
	}

	return false
}

// SetTickerSymbol gets a reference to the given NullableString and assigns it to the TickerSymbol field.
func (o *Security) SetTickerSymbol(v string) {
	o.TickerSymbol.Set(&v)
}
// SetTickerSymbolNil sets the value for TickerSymbol to be an explicit nil
func (o *Security) SetTickerSymbolNil() {
	o.TickerSymbol.Set(nil)
}

// UnsetTickerSymbol ensures that no value is present for TickerSymbol, not even an explicit nil
func (o *Security) UnsetTickerSymbol() {
	o.TickerSymbol.Unset()
}

// GetIsCashEquivalent returns the IsCashEquivalent field value if set, zero value otherwise.
func (o *Security) GetIsCashEquivalent() bool {
	if o == nil || o.IsCashEquivalent == nil {
		var ret bool
		return ret
	}
	return *o.IsCashEquivalent
}

// GetIsCashEquivalentOk returns a tuple with the IsCashEquivalent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Security) GetIsCashEquivalentOk() (*bool, bool) {
	if o == nil || o.IsCashEquivalent == nil {
		return nil, false
	}
	return o.IsCashEquivalent, true
}

// HasIsCashEquivalent returns a boolean if a field has been set.
func (o *Security) HasIsCashEquivalent() bool {
	if o != nil && o.IsCashEquivalent != nil {
		return true
	}

	return false
}

// SetIsCashEquivalent gets a reference to the given bool and assigns it to the IsCashEquivalent field.
func (o *Security) SetIsCashEquivalent(v bool) {
	o.IsCashEquivalent = &v
}

// GetType returns the Type field value
func (o *Security) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Security) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Security) SetType(v string) {
	o.Type = v
}

// GetClosePrice returns the ClosePrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetClosePrice() float32 {
	if o == nil || o.ClosePrice.Get() == nil {
		var ret float32
		return ret
	}
	return *o.ClosePrice.Get()
}

// GetClosePriceOk returns a tuple with the ClosePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetClosePriceOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClosePrice.Get(), o.ClosePrice.IsSet()
}

// HasClosePrice returns a boolean if a field has been set.
func (o *Security) HasClosePrice() bool {
	if o != nil && o.ClosePrice.IsSet() {
		return true
	}

	return false
}

// SetClosePrice gets a reference to the given NullableFloat32 and assigns it to the ClosePrice field.
func (o *Security) SetClosePrice(v float32) {
	o.ClosePrice.Set(&v)
}
// SetClosePriceNil sets the value for ClosePrice to be an explicit nil
func (o *Security) SetClosePriceNil() {
	o.ClosePrice.Set(nil)
}

// UnsetClosePrice ensures that no value is present for ClosePrice, not even an explicit nil
func (o *Security) UnsetClosePrice() {
	o.ClosePrice.Unset()
}

// GetClosePriceAsOf returns the ClosePriceAsOf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetClosePriceAsOf() string {
	if o == nil || o.ClosePriceAsOf.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClosePriceAsOf.Get()
}

// GetClosePriceAsOfOk returns a tuple with the ClosePriceAsOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetClosePriceAsOfOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClosePriceAsOf.Get(), o.ClosePriceAsOf.IsSet()
}

// HasClosePriceAsOf returns a boolean if a field has been set.
func (o *Security) HasClosePriceAsOf() bool {
	if o != nil && o.ClosePriceAsOf.IsSet() {
		return true
	}

	return false
}

// SetClosePriceAsOf gets a reference to the given NullableString and assigns it to the ClosePriceAsOf field.
func (o *Security) SetClosePriceAsOf(v string) {
	o.ClosePriceAsOf.Set(&v)
}
// SetClosePriceAsOfNil sets the value for ClosePriceAsOf to be an explicit nil
func (o *Security) SetClosePriceAsOfNil() {
	o.ClosePriceAsOf.Set(nil)
}

// UnsetClosePriceAsOf ensures that no value is present for ClosePriceAsOf, not even an explicit nil
func (o *Security) UnsetClosePriceAsOf() {
	o.ClosePriceAsOf.Unset()
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetIsoCurrencyCode() string {
	if o == nil || o.IsoCurrencyCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.IsoCurrencyCode.Get()
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsoCurrencyCode.Get(), o.IsoCurrencyCode.IsSet()
}

// HasIsoCurrencyCode returns a boolean if a field has been set.
func (o *Security) HasIsoCurrencyCode() bool {
	if o != nil && o.IsoCurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetIsoCurrencyCode gets a reference to the given NullableString and assigns it to the IsoCurrencyCode field.
func (o *Security) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode.Set(&v)
}
// SetIsoCurrencyCodeNil sets the value for IsoCurrencyCode to be an explicit nil
func (o *Security) SetIsoCurrencyCodeNil() {
	o.IsoCurrencyCode.Set(nil)
}

// UnsetIsoCurrencyCode ensures that no value is present for IsoCurrencyCode, not even an explicit nil
func (o *Security) UnsetIsoCurrencyCode() {
	o.IsoCurrencyCode.Unset()
}

// GetUnofficialCurrencyCode returns the UnofficialCurrencyCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Security) GetUnofficialCurrencyCode() string {
	if o == nil || o.UnofficialCurrencyCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.UnofficialCurrencyCode.Get()
}

// GetUnofficialCurrencyCodeOk returns a tuple with the UnofficialCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Security) GetUnofficialCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnofficialCurrencyCode.Get(), o.UnofficialCurrencyCode.IsSet()
}

// HasUnofficialCurrencyCode returns a boolean if a field has been set.
func (o *Security) HasUnofficialCurrencyCode() bool {
	if o != nil && o.UnofficialCurrencyCode.IsSet() {
		return true
	}

	return false
}

// SetUnofficialCurrencyCode gets a reference to the given NullableString and assigns it to the UnofficialCurrencyCode field.
func (o *Security) SetUnofficialCurrencyCode(v string) {
	o.UnofficialCurrencyCode.Set(&v)
}
// SetUnofficialCurrencyCodeNil sets the value for UnofficialCurrencyCode to be an explicit nil
func (o *Security) SetUnofficialCurrencyCodeNil() {
	o.UnofficialCurrencyCode.Set(nil)
}

// UnsetUnofficialCurrencyCode ensures that no value is present for UnofficialCurrencyCode, not even an explicit nil
func (o *Security) UnsetUnofficialCurrencyCode() {
	o.UnofficialCurrencyCode.Unset()
}

func (o Security) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["security_id"] = o.SecurityId
	}
	if o.Isin.IsSet() {
		toSerialize["isin"] = o.Isin.Get()
	}
	if o.Cusip.IsSet() {
		toSerialize["cusip"] = o.Cusip.Get()
	}
	if o.Sedol.IsSet() {
		toSerialize["sedol"] = o.Sedol.Get()
	}
	if o.InstitutionSecurityId.IsSet() {
		toSerialize["institution_security_id"] = o.InstitutionSecurityId.Get()
	}
	if o.InstitutionId.IsSet() {
		toSerialize["institution_id"] = o.InstitutionId.Get()
	}
	if o.ProxySecurityId.IsSet() {
		toSerialize["proxy_security_id"] = o.ProxySecurityId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TickerSymbol.IsSet() {
		toSerialize["ticker_symbol"] = o.TickerSymbol.Get()
	}
	if o.IsCashEquivalent != nil {
		toSerialize["is_cash_equivalent"] = o.IsCashEquivalent
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.ClosePrice.IsSet() {
		toSerialize["close_price"] = o.ClosePrice.Get()
	}
	if o.ClosePriceAsOf.IsSet() {
		toSerialize["close_price_as_of"] = o.ClosePriceAsOf.Get()
	}
	if o.IsoCurrencyCode.IsSet() {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode.Get()
	}
	if o.UnofficialCurrencyCode.IsSet() {
		toSerialize["unofficial_currency_code"] = o.UnofficialCurrencyCode.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Security) UnmarshalJSON(bytes []byte) (err error) {
	varSecurity := _Security{}

	if err = json.Unmarshal(bytes, &varSecurity); err == nil {
		*o = Security(varSecurity)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "security_id")
		delete(additionalProperties, "isin")
		delete(additionalProperties, "cusip")
		delete(additionalProperties, "sedol")
		delete(additionalProperties, "institution_security_id")
		delete(additionalProperties, "institution_id")
		delete(additionalProperties, "proxy_security_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ticker_symbol")
		delete(additionalProperties, "is_cash_equivalent")
		delete(additionalProperties, "type")
		delete(additionalProperties, "close_price")
		delete(additionalProperties, "close_price_as_of")
		delete(additionalProperties, "iso_currency_code")
		delete(additionalProperties, "unofficial_currency_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecurity struct {
	value *Security
	isSet bool
}

func (v NullableSecurity) Get() *Security {
	return v.value
}

func (v *NullableSecurity) Set(val *Security) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurity(val *Security) *NullableSecurity {
	return &NullableSecurity{value: val, isSet: true}
}

func (v NullableSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.5.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// IncomeBreakdown struct for IncomeBreakdown
type IncomeBreakdown struct {
	// The type of income. Possible values include `\"regular\"`, `\"overtime\"`, and `\"bonus\"`.
	Type NullableString `json:"type,omitempty"`
	// The hourly rate at which the income is paid.
	Rate NullableFloat32 `json:"rate,omitempty"`
	// The number of hours logged for this income for this pay period.
	Hours NullableFloat32 `json:"hours,omitempty"`
	// The total pay for this pay period.
	Total NullableFloat32 `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IncomeBreakdown IncomeBreakdown

// NewIncomeBreakdown instantiates a new IncomeBreakdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomeBreakdown() *IncomeBreakdown {
	this := IncomeBreakdown{}
	return &this
}

// NewIncomeBreakdownWithDefaults instantiates a new IncomeBreakdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomeBreakdownWithDefaults() *IncomeBreakdown {
	this := IncomeBreakdown{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeBreakdown) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeBreakdown) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *IncomeBreakdown) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *IncomeBreakdown) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *IncomeBreakdown) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *IncomeBreakdown) UnsetType() {
	o.Type.Unset()
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeBreakdown) GetRate() float32 {
	if o == nil || o.Rate.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Rate.Get()
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeBreakdown) GetRateOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Rate.Get(), o.Rate.IsSet()
}

// HasRate returns a boolean if a field has been set.
func (o *IncomeBreakdown) HasRate() bool {
	if o != nil && o.Rate.IsSet() {
		return true
	}

	return false
}

// SetRate gets a reference to the given NullableFloat32 and assigns it to the Rate field.
func (o *IncomeBreakdown) SetRate(v float32) {
	o.Rate.Set(&v)
}
// SetRateNil sets the value for Rate to be an explicit nil
func (o *IncomeBreakdown) SetRateNil() {
	o.Rate.Set(nil)
}

// UnsetRate ensures that no value is present for Rate, not even an explicit nil
func (o *IncomeBreakdown) UnsetRate() {
	o.Rate.Unset()
}

// GetHours returns the Hours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeBreakdown) GetHours() float32 {
	if o == nil || o.Hours.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Hours.Get()
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeBreakdown) GetHoursOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Hours.Get(), o.Hours.IsSet()
}

// HasHours returns a boolean if a field has been set.
func (o *IncomeBreakdown) HasHours() bool {
	if o != nil && o.Hours.IsSet() {
		return true
	}

	return false
}

// SetHours gets a reference to the given NullableFloat32 and assigns it to the Hours field.
func (o *IncomeBreakdown) SetHours(v float32) {
	o.Hours.Set(&v)
}
// SetHoursNil sets the value for Hours to be an explicit nil
func (o *IncomeBreakdown) SetHoursNil() {
	o.Hours.Set(nil)
}

// UnsetHours ensures that no value is present for Hours, not even an explicit nil
func (o *IncomeBreakdown) UnsetHours() {
	o.Hours.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeBreakdown) GetTotal() float32 {
	if o == nil || o.Total.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeBreakdown) GetTotalOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *IncomeBreakdown) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableFloat32 and assigns it to the Total field.
func (o *IncomeBreakdown) SetTotal(v float32) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *IncomeBreakdown) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *IncomeBreakdown) UnsetTotal() {
	o.Total.Unset()
}

func (o IncomeBreakdown) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Rate.IsSet() {
		toSerialize["rate"] = o.Rate.Get()
	}
	if o.Hours.IsSet() {
		toSerialize["hours"] = o.Hours.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IncomeBreakdown) UnmarshalJSON(bytes []byte) (err error) {
	varIncomeBreakdown := _IncomeBreakdown{}

	if err = json.Unmarshal(bytes, &varIncomeBreakdown); err == nil {
		*o = IncomeBreakdown(varIncomeBreakdown)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "rate")
		delete(additionalProperties, "hours")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncomeBreakdown struct {
	value *IncomeBreakdown
	isSet bool
}

func (v NullableIncomeBreakdown) Get() *IncomeBreakdown {
	return v.value
}

func (v *NullableIncomeBreakdown) Set(val *IncomeBreakdown) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomeBreakdown) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomeBreakdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomeBreakdown(val *IncomeBreakdown) *NullableIncomeBreakdown {
	return &NullableIncomeBreakdown{value: val, isSet: true}
}

func (v NullableIncomeBreakdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomeBreakdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.5.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// Employee Data about the employee.
type Employee struct {
	// The name of the employee.
	Name    NullableString      `json:"name,omitempty"`
	Address NullableAddressData `json:"address,omitempty"`
	// The SSN of the employee, with all but the last 4 digits masked out. For example: \"XXX-XX-1111\".
	SsnMasked            NullableString `json:"ssn_masked,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Employee Employee

// NewEmployee instantiates a new Employee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployee() *Employee {
	this := Employee{}
	return &this
}

// NewEmployeeWithDefaults instantiates a new Employee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmployeeWithDefaults() *Employee {
	this := Employee{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employee) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employee) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Employee) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Employee) SetName(v string) {
	o.Name.Set(&v)
}

// SetNameNil sets the value for Name to be an explicit nil
func (o *Employee) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Employee) UnsetName() {
	o.Name.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employee) GetAddress() AddressData {
	if o == nil || o.Address.Get() == nil {
		var ret AddressData
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employee) GetAddressOk() (*AddressData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *Employee) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableAddressData and assigns it to the Address field.
func (o *Employee) SetAddress(v AddressData) {
	o.Address.Set(&v)
}

// SetAddressNil sets the value for Address to be an explicit nil
func (o *Employee) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *Employee) UnsetAddress() {
	o.Address.Unset()
}

// GetSsnMasked returns the SsnMasked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Employee) GetSsnMasked() string {
	if o == nil || o.SsnMasked.Get() == nil {
		var ret string
		return ret
	}
	return *o.SsnMasked.Get()
}

// GetSsnMaskedOk returns a tuple with the SsnMasked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Employee) GetSsnMaskedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SsnMasked.Get(), o.SsnMasked.IsSet()
}

// HasSsnMasked returns a boolean if a field has been set.
func (o *Employee) HasSsnMasked() bool {
	if o != nil && o.SsnMasked.IsSet() {
		return true
	}

	return false
}

// SetSsnMasked gets a reference to the given NullableString and assigns it to the SsnMasked field.
func (o *Employee) SetSsnMasked(v string) {
	o.SsnMasked.Set(&v)
}

// SetSsnMaskedNil sets the value for SsnMasked to be an explicit nil
func (o *Employee) SetSsnMaskedNil() {
	o.SsnMasked.Set(nil)
}

// UnsetSsnMasked ensures that no value is present for SsnMasked, not even an explicit nil
func (o *Employee) UnsetSsnMasked() {
	o.SsnMasked.Unset()
}

func (o Employee) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.SsnMasked.IsSet() {
		toSerialize["ssn_masked"] = o.SsnMasked.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Employee) UnmarshalJSON(bytes []byte) (err error) {
	varEmployee := _Employee{}

	if err = json.Unmarshal(bytes, &varEmployee); err == nil {
		*o = Employee(varEmployee)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "address")
		delete(additionalProperties, "ssn_masked")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmployee struct {
	value *Employee
	isSet bool
}

func (v NullableEmployee) Get() *Employee {
	return v.value
}

func (v *NullableEmployee) Set(val *Employee) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployee) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployee(val *Employee) *NullableEmployee {
	return &NullableEmployee{value: val, isSet: true}
}

func (v NullableEmployee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.5.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// StudentLoan Contains details about a student loan account
type StudentLoan struct {
	// The ID of the account that this liability belongs to.
	AccountId NullableString `json:"account_id,omitempty"`
	// The account number of the loan.
	AccountNumber NullableString `json:"account_number,omitempty"`
	// The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
	DisbursementDates []string `json:"disbursement_dates,omitempty"`
	// The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
	ExpectedPayoffDate NullableString `json:"expected_payoff_date,omitempty"`
	// The guarantor of the student loan.
	Guarantor NullableString `json:"guarantor,omitempty"`
	// The interest rate on the loan as a percentage.
	InterestRatePercentage float32 `json:"interest_rate_percentage"`
	// `true` if a payment is currently overdue. Availability for this field is limited.
	IsOverdue NullableBool `json:"is_overdue,omitempty"`
	// The amount of the last payment.
	LastPaymentAmount NullableFloat32 `json:"last_payment_amount,omitempty"`
	// The date of the last payment. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
	LastPaymentDate NullableString `json:"last_payment_date,omitempty"`
	// The outstanding balance on the last statement. This field could also be interpreted as the next payment due. Availability for this field is limited. 
	LastStatementBalance NullableFloat32 `json:"last_statement_balance,omitempty"`
	// The date of the last statement. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
	LastStatementIssueDate NullableString `json:"last_statement_issue_date,omitempty"`
	// The type of loan, e.g., \"Consolidation Loans\".
	LoanName NullableString `json:"loan_name,omitempty"`
	LoanStatus *StudentLoanStatus `json:"loan_status,omitempty"`
	// The minimum payment due for the next billing cycle. There are some exceptions: Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`). Firstmark (`ins_116295` ) will display as $0 if there is an autopay program in effect.
	MinimumPaymentAmount NullableFloat32 `json:"minimum_payment_amount,omitempty"`
	// The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an ISO 8601 format (YYYY-MM-DD).
	NextPaymentDueDate NullableString `json:"next_payment_due_date,omitempty"`
	// The date on which the loan was initially lent. Dates are returned in an ISO 8601 format (YYYY-MM-DD). 
	OriginationDate NullableString `json:"origination_date,omitempty"`
	// The original principal balance of the loan.
	OriginationPrincipalAmount NullableFloat32 `json:"origination_principal_amount,omitempty"`
	// The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
	OutstandingInterestAmount NullableFloat32 `json:"outstanding_interest_amount,omitempty"`
	// The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match a`ccount_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different.
	PaymentReferenceNumber NullableString `json:"payment_reference_number,omitempty"`
	PslfStatus *PSLFStatus `json:"pslf_status,omitempty"`
	RepaymentPlan *StudentRepaymentPlan `json:"repayment_plan,omitempty"`
	// The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available.
	SequenceNumber NullableString `json:"sequence_number,omitempty"`
	ServicerAddress *ServicerAddressData `json:"servicer_address,omitempty"`
	// The year to date (YTD) interest paid. Availability for this field is limited.
	YtdInterestPaid NullableFloat32 `json:"ytd_interest_paid,omitempty"`
	// The year to date (YTD) principal paid. Availability for this field is limited.
	YtdPrincipalPaid NullableFloat32 `json:"ytd_principal_paid,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StudentLoan StudentLoan

// NewStudentLoan instantiates a new StudentLoan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudentLoan(interestRatePercentage float32, ) *StudentLoan {
	this := StudentLoan{}
	this.InterestRatePercentage = interestRatePercentage
	return &this
}

// NewStudentLoanWithDefaults instantiates a new StudentLoan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudentLoanWithDefaults() *StudentLoan {
	this := StudentLoan{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetAccountId() string {
	if o == nil || o.AccountId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// HasAccountId returns a boolean if a field has been set.
func (o *StudentLoan) HasAccountId() bool {
	if o != nil && o.AccountId.IsSet() {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given NullableString and assigns it to the AccountId field.
func (o *StudentLoan) SetAccountId(v string) {
	o.AccountId.Set(&v)
}
// SetAccountIdNil sets the value for AccountId to be an explicit nil
func (o *StudentLoan) SetAccountIdNil() {
	o.AccountId.Set(nil)
}

// UnsetAccountId ensures that no value is present for AccountId, not even an explicit nil
func (o *StudentLoan) UnsetAccountId() {
	o.AccountId.Unset()
}

// GetAccountNumber returns the AccountNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetAccountNumber() string {
	if o == nil || o.AccountNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountNumber.Get()
}

// GetAccountNumberOk returns a tuple with the AccountNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetAccountNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountNumber.Get(), o.AccountNumber.IsSet()
}

// HasAccountNumber returns a boolean if a field has been set.
func (o *StudentLoan) HasAccountNumber() bool {
	if o != nil && o.AccountNumber.IsSet() {
		return true
	}

	return false
}

// SetAccountNumber gets a reference to the given NullableString and assigns it to the AccountNumber field.
func (o *StudentLoan) SetAccountNumber(v string) {
	o.AccountNumber.Set(&v)
}
// SetAccountNumberNil sets the value for AccountNumber to be an explicit nil
func (o *StudentLoan) SetAccountNumberNil() {
	o.AccountNumber.Set(nil)
}

// UnsetAccountNumber ensures that no value is present for AccountNumber, not even an explicit nil
func (o *StudentLoan) UnsetAccountNumber() {
	o.AccountNumber.Unset()
}

// GetDisbursementDates returns the DisbursementDates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetDisbursementDates() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DisbursementDates
}

// GetDisbursementDatesOk returns a tuple with the DisbursementDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetDisbursementDatesOk() (*[]string, bool) {
	if o == nil || o.DisbursementDates == nil {
		return nil, false
	}
	return &o.DisbursementDates, true
}

// HasDisbursementDates returns a boolean if a field has been set.
func (o *StudentLoan) HasDisbursementDates() bool {
	if o != nil && o.DisbursementDates != nil {
		return true
	}

	return false
}

// SetDisbursementDates gets a reference to the given []string and assigns it to the DisbursementDates field.
func (o *StudentLoan) SetDisbursementDates(v []string) {
	o.DisbursementDates = v
}

// GetExpectedPayoffDate returns the ExpectedPayoffDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetExpectedPayoffDate() string {
	if o == nil || o.ExpectedPayoffDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExpectedPayoffDate.Get()
}

// GetExpectedPayoffDateOk returns a tuple with the ExpectedPayoffDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetExpectedPayoffDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpectedPayoffDate.Get(), o.ExpectedPayoffDate.IsSet()
}

// HasExpectedPayoffDate returns a boolean if a field has been set.
func (o *StudentLoan) HasExpectedPayoffDate() bool {
	if o != nil && o.ExpectedPayoffDate.IsSet() {
		return true
	}

	return false
}

// SetExpectedPayoffDate gets a reference to the given NullableString and assigns it to the ExpectedPayoffDate field.
func (o *StudentLoan) SetExpectedPayoffDate(v string) {
	o.ExpectedPayoffDate.Set(&v)
}
// SetExpectedPayoffDateNil sets the value for ExpectedPayoffDate to be an explicit nil
func (o *StudentLoan) SetExpectedPayoffDateNil() {
	o.ExpectedPayoffDate.Set(nil)
}

// UnsetExpectedPayoffDate ensures that no value is present for ExpectedPayoffDate, not even an explicit nil
func (o *StudentLoan) UnsetExpectedPayoffDate() {
	o.ExpectedPayoffDate.Unset()
}

// GetGuarantor returns the Guarantor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetGuarantor() string {
	if o == nil || o.Guarantor.Get() == nil {
		var ret string
		return ret
	}
	return *o.Guarantor.Get()
}

// GetGuarantorOk returns a tuple with the Guarantor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetGuarantorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Guarantor.Get(), o.Guarantor.IsSet()
}

// HasGuarantor returns a boolean if a field has been set.
func (o *StudentLoan) HasGuarantor() bool {
	if o != nil && o.Guarantor.IsSet() {
		return true
	}

	return false
}

// SetGuarantor gets a reference to the given NullableString and assigns it to the Guarantor field.
func (o *StudentLoan) SetGuarantor(v string) {
	o.Guarantor.Set(&v)
}
// SetGuarantorNil sets the value for Guarantor to be an explicit nil
func (o *StudentLoan) SetGuarantorNil() {
	o.Guarantor.Set(nil)
}

// UnsetGuarantor ensures that no value is present for Guarantor, not even an explicit nil
func (o *StudentLoan) UnsetGuarantor() {
	o.Guarantor.Unset()
}

// GetInterestRatePercentage returns the InterestRatePercentage field value
func (o *StudentLoan) GetInterestRatePercentage() float32 {
	if o == nil  {
		var ret float32
		return ret
	}

	return o.InterestRatePercentage
}

// GetInterestRatePercentageOk returns a tuple with the InterestRatePercentage field value
// and a boolean to check if the value has been set.
func (o *StudentLoan) GetInterestRatePercentageOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InterestRatePercentage, true
}

// SetInterestRatePercentage sets field value
func (o *StudentLoan) SetInterestRatePercentage(v float32) {
	o.InterestRatePercentage = v
}

// GetIsOverdue returns the IsOverdue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetIsOverdue() bool {
	if o == nil || o.IsOverdue.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsOverdue.Get()
}

// GetIsOverdueOk returns a tuple with the IsOverdue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetIsOverdueOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsOverdue.Get(), o.IsOverdue.IsSet()
}

// HasIsOverdue returns a boolean if a field has been set.
func (o *StudentLoan) HasIsOverdue() bool {
	if o != nil && o.IsOverdue.IsSet() {
		return true
	}

	return false
}

// SetIsOverdue gets a reference to the given NullableBool and assigns it to the IsOverdue field.
func (o *StudentLoan) SetIsOverdue(v bool) {
	o.IsOverdue.Set(&v)
}
// SetIsOverdueNil sets the value for IsOverdue to be an explicit nil
func (o *StudentLoan) SetIsOverdueNil() {
	o.IsOverdue.Set(nil)
}

// UnsetIsOverdue ensures that no value is present for IsOverdue, not even an explicit nil
func (o *StudentLoan) UnsetIsOverdue() {
	o.IsOverdue.Unset()
}

// GetLastPaymentAmount returns the LastPaymentAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetLastPaymentAmount() float32 {
	if o == nil || o.LastPaymentAmount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.LastPaymentAmount.Get()
}

// GetLastPaymentAmountOk returns a tuple with the LastPaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetLastPaymentAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastPaymentAmount.Get(), o.LastPaymentAmount.IsSet()
}

// HasLastPaymentAmount returns a boolean if a field has been set.
func (o *StudentLoan) HasLastPaymentAmount() bool {
	if o != nil && o.LastPaymentAmount.IsSet() {
		return true
	}

	return false
}

// SetLastPaymentAmount gets a reference to the given NullableFloat32 and assigns it to the LastPaymentAmount field.
func (o *StudentLoan) SetLastPaymentAmount(v float32) {
	o.LastPaymentAmount.Set(&v)
}
// SetLastPaymentAmountNil sets the value for LastPaymentAmount to be an explicit nil
func (o *StudentLoan) SetLastPaymentAmountNil() {
	o.LastPaymentAmount.Set(nil)
}

// UnsetLastPaymentAmount ensures that no value is present for LastPaymentAmount, not even an explicit nil
func (o *StudentLoan) UnsetLastPaymentAmount() {
	o.LastPaymentAmount.Unset()
}

// GetLastPaymentDate returns the LastPaymentDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetLastPaymentDate() string {
	if o == nil || o.LastPaymentDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastPaymentDate.Get()
}

// GetLastPaymentDateOk returns a tuple with the LastPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetLastPaymentDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastPaymentDate.Get(), o.LastPaymentDate.IsSet()
}

// HasLastPaymentDate returns a boolean if a field has been set.
func (o *StudentLoan) HasLastPaymentDate() bool {
	if o != nil && o.LastPaymentDate.IsSet() {
		return true
	}

	return false
}

// SetLastPaymentDate gets a reference to the given NullableString and assigns it to the LastPaymentDate field.
func (o *StudentLoan) SetLastPaymentDate(v string) {
	o.LastPaymentDate.Set(&v)
}
// SetLastPaymentDateNil sets the value for LastPaymentDate to be an explicit nil
func (o *StudentLoan) SetLastPaymentDateNil() {
	o.LastPaymentDate.Set(nil)
}

// UnsetLastPaymentDate ensures that no value is present for LastPaymentDate, not even an explicit nil
func (o *StudentLoan) UnsetLastPaymentDate() {
	o.LastPaymentDate.Unset()
}

// GetLastStatementBalance returns the LastStatementBalance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetLastStatementBalance() float32 {
	if o == nil || o.LastStatementBalance.Get() == nil {
		var ret float32
		return ret
	}
	return *o.LastStatementBalance.Get()
}

// GetLastStatementBalanceOk returns a tuple with the LastStatementBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetLastStatementBalanceOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastStatementBalance.Get(), o.LastStatementBalance.IsSet()
}

// HasLastStatementBalance returns a boolean if a field has been set.
func (o *StudentLoan) HasLastStatementBalance() bool {
	if o != nil && o.LastStatementBalance.IsSet() {
		return true
	}

	return false
}

// SetLastStatementBalance gets a reference to the given NullableFloat32 and assigns it to the LastStatementBalance field.
func (o *StudentLoan) SetLastStatementBalance(v float32) {
	o.LastStatementBalance.Set(&v)
}
// SetLastStatementBalanceNil sets the value for LastStatementBalance to be an explicit nil
func (o *StudentLoan) SetLastStatementBalanceNil() {
	o.LastStatementBalance.Set(nil)
}

// UnsetLastStatementBalance ensures that no value is present for LastStatementBalance, not even an explicit nil
func (o *StudentLoan) UnsetLastStatementBalance() {
	o.LastStatementBalance.Unset()
}

// GetLastStatementIssueDate returns the LastStatementIssueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetLastStatementIssueDate() string {
	if o == nil || o.LastStatementIssueDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.LastStatementIssueDate.Get()
}

// GetLastStatementIssueDateOk returns a tuple with the LastStatementIssueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetLastStatementIssueDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastStatementIssueDate.Get(), o.LastStatementIssueDate.IsSet()
}

// HasLastStatementIssueDate returns a boolean if a field has been set.
func (o *StudentLoan) HasLastStatementIssueDate() bool {
	if o != nil && o.LastStatementIssueDate.IsSet() {
		return true
	}

	return false
}

// SetLastStatementIssueDate gets a reference to the given NullableString and assigns it to the LastStatementIssueDate field.
func (o *StudentLoan) SetLastStatementIssueDate(v string) {
	o.LastStatementIssueDate.Set(&v)
}
// SetLastStatementIssueDateNil sets the value for LastStatementIssueDate to be an explicit nil
func (o *StudentLoan) SetLastStatementIssueDateNil() {
	o.LastStatementIssueDate.Set(nil)
}

// UnsetLastStatementIssueDate ensures that no value is present for LastStatementIssueDate, not even an explicit nil
func (o *StudentLoan) UnsetLastStatementIssueDate() {
	o.LastStatementIssueDate.Unset()
}

// GetLoanName returns the LoanName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetLoanName() string {
	if o == nil || o.LoanName.Get() == nil {
		var ret string
		return ret
	}
	return *o.LoanName.Get()
}

// GetLoanNameOk returns a tuple with the LoanName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetLoanNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LoanName.Get(), o.LoanName.IsSet()
}

// HasLoanName returns a boolean if a field has been set.
func (o *StudentLoan) HasLoanName() bool {
	if o != nil && o.LoanName.IsSet() {
		return true
	}

	return false
}

// SetLoanName gets a reference to the given NullableString and assigns it to the LoanName field.
func (o *StudentLoan) SetLoanName(v string) {
	o.LoanName.Set(&v)
}
// SetLoanNameNil sets the value for LoanName to be an explicit nil
func (o *StudentLoan) SetLoanNameNil() {
	o.LoanName.Set(nil)
}

// UnsetLoanName ensures that no value is present for LoanName, not even an explicit nil
func (o *StudentLoan) UnsetLoanName() {
	o.LoanName.Unset()
}

// GetLoanStatus returns the LoanStatus field value if set, zero value otherwise.
func (o *StudentLoan) GetLoanStatus() StudentLoanStatus {
	if o == nil || o.LoanStatus == nil {
		var ret StudentLoanStatus
		return ret
	}
	return *o.LoanStatus
}

// GetLoanStatusOk returns a tuple with the LoanStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudentLoan) GetLoanStatusOk() (*StudentLoanStatus, bool) {
	if o == nil || o.LoanStatus == nil {
		return nil, false
	}
	return o.LoanStatus, true
}

// HasLoanStatus returns a boolean if a field has been set.
func (o *StudentLoan) HasLoanStatus() bool {
	if o != nil && o.LoanStatus != nil {
		return true
	}

	return false
}

// SetLoanStatus gets a reference to the given StudentLoanStatus and assigns it to the LoanStatus field.
func (o *StudentLoan) SetLoanStatus(v StudentLoanStatus) {
	o.LoanStatus = &v
}

// GetMinimumPaymentAmount returns the MinimumPaymentAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetMinimumPaymentAmount() float32 {
	if o == nil || o.MinimumPaymentAmount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.MinimumPaymentAmount.Get()
}

// GetMinimumPaymentAmountOk returns a tuple with the MinimumPaymentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetMinimumPaymentAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinimumPaymentAmount.Get(), o.MinimumPaymentAmount.IsSet()
}

// HasMinimumPaymentAmount returns a boolean if a field has been set.
func (o *StudentLoan) HasMinimumPaymentAmount() bool {
	if o != nil && o.MinimumPaymentAmount.IsSet() {
		return true
	}

	return false
}

// SetMinimumPaymentAmount gets a reference to the given NullableFloat32 and assigns it to the MinimumPaymentAmount field.
func (o *StudentLoan) SetMinimumPaymentAmount(v float32) {
	o.MinimumPaymentAmount.Set(&v)
}
// SetMinimumPaymentAmountNil sets the value for MinimumPaymentAmount to be an explicit nil
func (o *StudentLoan) SetMinimumPaymentAmountNil() {
	o.MinimumPaymentAmount.Set(nil)
}

// UnsetMinimumPaymentAmount ensures that no value is present for MinimumPaymentAmount, not even an explicit nil
func (o *StudentLoan) UnsetMinimumPaymentAmount() {
	o.MinimumPaymentAmount.Unset()
}

// GetNextPaymentDueDate returns the NextPaymentDueDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetNextPaymentDueDate() string {
	if o == nil || o.NextPaymentDueDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.NextPaymentDueDate.Get()
}

// GetNextPaymentDueDateOk returns a tuple with the NextPaymentDueDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetNextPaymentDueDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextPaymentDueDate.Get(), o.NextPaymentDueDate.IsSet()
}

// HasNextPaymentDueDate returns a boolean if a field has been set.
func (o *StudentLoan) HasNextPaymentDueDate() bool {
	if o != nil && o.NextPaymentDueDate.IsSet() {
		return true
	}

	return false
}

// SetNextPaymentDueDate gets a reference to the given NullableString and assigns it to the NextPaymentDueDate field.
func (o *StudentLoan) SetNextPaymentDueDate(v string) {
	o.NextPaymentDueDate.Set(&v)
}
// SetNextPaymentDueDateNil sets the value for NextPaymentDueDate to be an explicit nil
func (o *StudentLoan) SetNextPaymentDueDateNil() {
	o.NextPaymentDueDate.Set(nil)
}

// UnsetNextPaymentDueDate ensures that no value is present for NextPaymentDueDate, not even an explicit nil
func (o *StudentLoan) UnsetNextPaymentDueDate() {
	o.NextPaymentDueDate.Unset()
}

// GetOriginationDate returns the OriginationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetOriginationDate() string {
	if o == nil || o.OriginationDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.OriginationDate.Get()
}

// GetOriginationDateOk returns a tuple with the OriginationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetOriginationDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginationDate.Get(), o.OriginationDate.IsSet()
}

// HasOriginationDate returns a boolean if a field has been set.
func (o *StudentLoan) HasOriginationDate() bool {
	if o != nil && o.OriginationDate.IsSet() {
		return true
	}

	return false
}

// SetOriginationDate gets a reference to the given NullableString and assigns it to the OriginationDate field.
func (o *StudentLoan) SetOriginationDate(v string) {
	o.OriginationDate.Set(&v)
}
// SetOriginationDateNil sets the value for OriginationDate to be an explicit nil
func (o *StudentLoan) SetOriginationDateNil() {
	o.OriginationDate.Set(nil)
}

// UnsetOriginationDate ensures that no value is present for OriginationDate, not even an explicit nil
func (o *StudentLoan) UnsetOriginationDate() {
	o.OriginationDate.Unset()
}

// GetOriginationPrincipalAmount returns the OriginationPrincipalAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetOriginationPrincipalAmount() float32 {
	if o == nil || o.OriginationPrincipalAmount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.OriginationPrincipalAmount.Get()
}

// GetOriginationPrincipalAmountOk returns a tuple with the OriginationPrincipalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetOriginationPrincipalAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginationPrincipalAmount.Get(), o.OriginationPrincipalAmount.IsSet()
}

// HasOriginationPrincipalAmount returns a boolean if a field has been set.
func (o *StudentLoan) HasOriginationPrincipalAmount() bool {
	if o != nil && o.OriginationPrincipalAmount.IsSet() {
		return true
	}

	return false
}

// SetOriginationPrincipalAmount gets a reference to the given NullableFloat32 and assigns it to the OriginationPrincipalAmount field.
func (o *StudentLoan) SetOriginationPrincipalAmount(v float32) {
	o.OriginationPrincipalAmount.Set(&v)
}
// SetOriginationPrincipalAmountNil sets the value for OriginationPrincipalAmount to be an explicit nil
func (o *StudentLoan) SetOriginationPrincipalAmountNil() {
	o.OriginationPrincipalAmount.Set(nil)
}

// UnsetOriginationPrincipalAmount ensures that no value is present for OriginationPrincipalAmount, not even an explicit nil
func (o *StudentLoan) UnsetOriginationPrincipalAmount() {
	o.OriginationPrincipalAmount.Unset()
}

// GetOutstandingInterestAmount returns the OutstandingInterestAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetOutstandingInterestAmount() float32 {
	if o == nil || o.OutstandingInterestAmount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.OutstandingInterestAmount.Get()
}

// GetOutstandingInterestAmountOk returns a tuple with the OutstandingInterestAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetOutstandingInterestAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OutstandingInterestAmount.Get(), o.OutstandingInterestAmount.IsSet()
}

// HasOutstandingInterestAmount returns a boolean if a field has been set.
func (o *StudentLoan) HasOutstandingInterestAmount() bool {
	if o != nil && o.OutstandingInterestAmount.IsSet() {
		return true
	}

	return false
}

// SetOutstandingInterestAmount gets a reference to the given NullableFloat32 and assigns it to the OutstandingInterestAmount field.
func (o *StudentLoan) SetOutstandingInterestAmount(v float32) {
	o.OutstandingInterestAmount.Set(&v)
}
// SetOutstandingInterestAmountNil sets the value for OutstandingInterestAmount to be an explicit nil
func (o *StudentLoan) SetOutstandingInterestAmountNil() {
	o.OutstandingInterestAmount.Set(nil)
}

// UnsetOutstandingInterestAmount ensures that no value is present for OutstandingInterestAmount, not even an explicit nil
func (o *StudentLoan) UnsetOutstandingInterestAmount() {
	o.OutstandingInterestAmount.Unset()
}

// GetPaymentReferenceNumber returns the PaymentReferenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetPaymentReferenceNumber() string {
	if o == nil || o.PaymentReferenceNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.PaymentReferenceNumber.Get()
}

// GetPaymentReferenceNumberOk returns a tuple with the PaymentReferenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetPaymentReferenceNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaymentReferenceNumber.Get(), o.PaymentReferenceNumber.IsSet()
}

// HasPaymentReferenceNumber returns a boolean if a field has been set.
func (o *StudentLoan) HasPaymentReferenceNumber() bool {
	if o != nil && o.PaymentReferenceNumber.IsSet() {
		return true
	}

	return false
}

// SetPaymentReferenceNumber gets a reference to the given NullableString and assigns it to the PaymentReferenceNumber field.
func (o *StudentLoan) SetPaymentReferenceNumber(v string) {
	o.PaymentReferenceNumber.Set(&v)
}
// SetPaymentReferenceNumberNil sets the value for PaymentReferenceNumber to be an explicit nil
func (o *StudentLoan) SetPaymentReferenceNumberNil() {
	o.PaymentReferenceNumber.Set(nil)
}

// UnsetPaymentReferenceNumber ensures that no value is present for PaymentReferenceNumber, not even an explicit nil
func (o *StudentLoan) UnsetPaymentReferenceNumber() {
	o.PaymentReferenceNumber.Unset()
}

// GetPslfStatus returns the PslfStatus field value if set, zero value otherwise.
func (o *StudentLoan) GetPslfStatus() PSLFStatus {
	if o == nil || o.PslfStatus == nil {
		var ret PSLFStatus
		return ret
	}
	return *o.PslfStatus
}

// GetPslfStatusOk returns a tuple with the PslfStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudentLoan) GetPslfStatusOk() (*PSLFStatus, bool) {
	if o == nil || o.PslfStatus == nil {
		return nil, false
	}
	return o.PslfStatus, true
}

// HasPslfStatus returns a boolean if a field has been set.
func (o *StudentLoan) HasPslfStatus() bool {
	if o != nil && o.PslfStatus != nil {
		return true
	}

	return false
}

// SetPslfStatus gets a reference to the given PSLFStatus and assigns it to the PslfStatus field.
func (o *StudentLoan) SetPslfStatus(v PSLFStatus) {
	o.PslfStatus = &v
}

// GetRepaymentPlan returns the RepaymentPlan field value if set, zero value otherwise.
func (o *StudentLoan) GetRepaymentPlan() StudentRepaymentPlan {
	if o == nil || o.RepaymentPlan == nil {
		var ret StudentRepaymentPlan
		return ret
	}
	return *o.RepaymentPlan
}

// GetRepaymentPlanOk returns a tuple with the RepaymentPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudentLoan) GetRepaymentPlanOk() (*StudentRepaymentPlan, bool) {
	if o == nil || o.RepaymentPlan == nil {
		return nil, false
	}
	return o.RepaymentPlan, true
}

// HasRepaymentPlan returns a boolean if a field has been set.
func (o *StudentLoan) HasRepaymentPlan() bool {
	if o != nil && o.RepaymentPlan != nil {
		return true
	}

	return false
}

// SetRepaymentPlan gets a reference to the given StudentRepaymentPlan and assigns it to the RepaymentPlan field.
func (o *StudentLoan) SetRepaymentPlan(v StudentRepaymentPlan) {
	o.RepaymentPlan = &v
}

// GetSequenceNumber returns the SequenceNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetSequenceNumber() string {
	if o == nil || o.SequenceNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.SequenceNumber.Get()
}

// GetSequenceNumberOk returns a tuple with the SequenceNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetSequenceNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SequenceNumber.Get(), o.SequenceNumber.IsSet()
}

// HasSequenceNumber returns a boolean if a field has been set.
func (o *StudentLoan) HasSequenceNumber() bool {
	if o != nil && o.SequenceNumber.IsSet() {
		return true
	}

	return false
}

// SetSequenceNumber gets a reference to the given NullableString and assigns it to the SequenceNumber field.
func (o *StudentLoan) SetSequenceNumber(v string) {
	o.SequenceNumber.Set(&v)
}
// SetSequenceNumberNil sets the value for SequenceNumber to be an explicit nil
func (o *StudentLoan) SetSequenceNumberNil() {
	o.SequenceNumber.Set(nil)
}

// UnsetSequenceNumber ensures that no value is present for SequenceNumber, not even an explicit nil
func (o *StudentLoan) UnsetSequenceNumber() {
	o.SequenceNumber.Unset()
}

// GetServicerAddress returns the ServicerAddress field value if set, zero value otherwise.
func (o *StudentLoan) GetServicerAddress() ServicerAddressData {
	if o == nil || o.ServicerAddress == nil {
		var ret ServicerAddressData
		return ret
	}
	return *o.ServicerAddress
}

// GetServicerAddressOk returns a tuple with the ServicerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudentLoan) GetServicerAddressOk() (*ServicerAddressData, bool) {
	if o == nil || o.ServicerAddress == nil {
		return nil, false
	}
	return o.ServicerAddress, true
}

// HasServicerAddress returns a boolean if a field has been set.
func (o *StudentLoan) HasServicerAddress() bool {
	if o != nil && o.ServicerAddress != nil {
		return true
	}

	return false
}

// SetServicerAddress gets a reference to the given ServicerAddressData and assigns it to the ServicerAddress field.
func (o *StudentLoan) SetServicerAddress(v ServicerAddressData) {
	o.ServicerAddress = &v
}

// GetYtdInterestPaid returns the YtdInterestPaid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetYtdInterestPaid() float32 {
	if o == nil || o.YtdInterestPaid.Get() == nil {
		var ret float32
		return ret
	}
	return *o.YtdInterestPaid.Get()
}

// GetYtdInterestPaidOk returns a tuple with the YtdInterestPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetYtdInterestPaidOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.YtdInterestPaid.Get(), o.YtdInterestPaid.IsSet()
}

// HasYtdInterestPaid returns a boolean if a field has been set.
func (o *StudentLoan) HasYtdInterestPaid() bool {
	if o != nil && o.YtdInterestPaid.IsSet() {
		return true
	}

	return false
}

// SetYtdInterestPaid gets a reference to the given NullableFloat32 and assigns it to the YtdInterestPaid field.
func (o *StudentLoan) SetYtdInterestPaid(v float32) {
	o.YtdInterestPaid.Set(&v)
}
// SetYtdInterestPaidNil sets the value for YtdInterestPaid to be an explicit nil
func (o *StudentLoan) SetYtdInterestPaidNil() {
	o.YtdInterestPaid.Set(nil)
}

// UnsetYtdInterestPaid ensures that no value is present for YtdInterestPaid, not even an explicit nil
func (o *StudentLoan) UnsetYtdInterestPaid() {
	o.YtdInterestPaid.Unset()
}

// GetYtdPrincipalPaid returns the YtdPrincipalPaid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StudentLoan) GetYtdPrincipalPaid() float32 {
	if o == nil || o.YtdPrincipalPaid.Get() == nil {
		var ret float32
		return ret
	}
	return *o.YtdPrincipalPaid.Get()
}

// GetYtdPrincipalPaidOk returns a tuple with the YtdPrincipalPaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StudentLoan) GetYtdPrincipalPaidOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.YtdPrincipalPaid.Get(), o.YtdPrincipalPaid.IsSet()
}

// HasYtdPrincipalPaid returns a boolean if a field has been set.
func (o *StudentLoan) HasYtdPrincipalPaid() bool {
	if o != nil && o.YtdPrincipalPaid.IsSet() {
		return true
	}

	return false
}

// SetYtdPrincipalPaid gets a reference to the given NullableFloat32 and assigns it to the YtdPrincipalPaid field.
func (o *StudentLoan) SetYtdPrincipalPaid(v float32) {
	o.YtdPrincipalPaid.Set(&v)
}
// SetYtdPrincipalPaidNil sets the value for YtdPrincipalPaid to be an explicit nil
func (o *StudentLoan) SetYtdPrincipalPaidNil() {
	o.YtdPrincipalPaid.Set(nil)
}

// UnsetYtdPrincipalPaid ensures that no value is present for YtdPrincipalPaid, not even an explicit nil
func (o *StudentLoan) UnsetYtdPrincipalPaid() {
	o.YtdPrincipalPaid.Unset()
}

func (o StudentLoan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId.IsSet() {
		toSerialize["account_id"] = o.AccountId.Get()
	}
	if o.AccountNumber.IsSet() {
		toSerialize["account_number"] = o.AccountNumber.Get()
	}
	if o.DisbursementDates != nil {
		toSerialize["disbursement_dates"] = o.DisbursementDates
	}
	if o.ExpectedPayoffDate.IsSet() {
		toSerialize["expected_payoff_date"] = o.ExpectedPayoffDate.Get()
	}
	if o.Guarantor.IsSet() {
		toSerialize["guarantor"] = o.Guarantor.Get()
	}
	if true {
		toSerialize["interest_rate_percentage"] = o.InterestRatePercentage
	}
	if o.IsOverdue.IsSet() {
		toSerialize["is_overdue"] = o.IsOverdue.Get()
	}
	if o.LastPaymentAmount.IsSet() {
		toSerialize["last_payment_amount"] = o.LastPaymentAmount.Get()
	}
	if o.LastPaymentDate.IsSet() {
		toSerialize["last_payment_date"] = o.LastPaymentDate.Get()
	}
	if o.LastStatementBalance.IsSet() {
		toSerialize["last_statement_balance"] = o.LastStatementBalance.Get()
	}
	if o.LastStatementIssueDate.IsSet() {
		toSerialize["last_statement_issue_date"] = o.LastStatementIssueDate.Get()
	}
	if o.LoanName.IsSet() {
		toSerialize["loan_name"] = o.LoanName.Get()
	}
	if o.LoanStatus != nil {
		toSerialize["loan_status"] = o.LoanStatus
	}
	if o.MinimumPaymentAmount.IsSet() {
		toSerialize["minimum_payment_amount"] = o.MinimumPaymentAmount.Get()
	}
	if o.NextPaymentDueDate.IsSet() {
		toSerialize["next_payment_due_date"] = o.NextPaymentDueDate.Get()
	}
	if o.OriginationDate.IsSet() {
		toSerialize["origination_date"] = o.OriginationDate.Get()
	}
	if o.OriginationPrincipalAmount.IsSet() {
		toSerialize["origination_principal_amount"] = o.OriginationPrincipalAmount.Get()
	}
	if o.OutstandingInterestAmount.IsSet() {
		toSerialize["outstanding_interest_amount"] = o.OutstandingInterestAmount.Get()
	}
	if o.PaymentReferenceNumber.IsSet() {
		toSerialize["payment_reference_number"] = o.PaymentReferenceNumber.Get()
	}
	if o.PslfStatus != nil {
		toSerialize["pslf_status"] = o.PslfStatus
	}
	if o.RepaymentPlan != nil {
		toSerialize["repayment_plan"] = o.RepaymentPlan
	}
	if o.SequenceNumber.IsSet() {
		toSerialize["sequence_number"] = o.SequenceNumber.Get()
	}
	if o.ServicerAddress != nil {
		toSerialize["servicer_address"] = o.ServicerAddress
	}
	if o.YtdInterestPaid.IsSet() {
		toSerialize["ytd_interest_paid"] = o.YtdInterestPaid.Get()
	}
	if o.YtdPrincipalPaid.IsSet() {
		toSerialize["ytd_principal_paid"] = o.YtdPrincipalPaid.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StudentLoan) UnmarshalJSON(bytes []byte) (err error) {
	varStudentLoan := _StudentLoan{}

	if err = json.Unmarshal(bytes, &varStudentLoan); err == nil {
		*o = StudentLoan(varStudentLoan)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "account_number")
		delete(additionalProperties, "disbursement_dates")
		delete(additionalProperties, "expected_payoff_date")
		delete(additionalProperties, "guarantor")
		delete(additionalProperties, "interest_rate_percentage")
		delete(additionalProperties, "is_overdue")
		delete(additionalProperties, "last_payment_amount")
		delete(additionalProperties, "last_payment_date")
		delete(additionalProperties, "last_statement_balance")
		delete(additionalProperties, "last_statement_issue_date")
		delete(additionalProperties, "loan_name")
		delete(additionalProperties, "loan_status")
		delete(additionalProperties, "minimum_payment_amount")
		delete(additionalProperties, "next_payment_due_date")
		delete(additionalProperties, "origination_date")
		delete(additionalProperties, "origination_principal_amount")
		delete(additionalProperties, "outstanding_interest_amount")
		delete(additionalProperties, "payment_reference_number")
		delete(additionalProperties, "pslf_status")
		delete(additionalProperties, "repayment_plan")
		delete(additionalProperties, "sequence_number")
		delete(additionalProperties, "servicer_address")
		delete(additionalProperties, "ytd_interest_paid")
		delete(additionalProperties, "ytd_principal_paid")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudentLoan struct {
	value *StudentLoan
	isSet bool
}

func (v NullableStudentLoan) Get() *StudentLoan {
	return v.value
}

func (v *NullableStudentLoan) Set(val *StudentLoan) {
	v.value = val
	v.isSet = true
}

func (v NullableStudentLoan) IsSet() bool {
	return v.isSet
}

func (v *NullableStudentLoan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudentLoan(val *StudentLoan) *NullableStudentLoan {
	return &NullableStudentLoan{value: val, isSet: true}
}

func (v NullableStudentLoan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudentLoan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



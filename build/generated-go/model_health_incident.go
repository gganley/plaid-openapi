/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.5.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// HealthIncident struct for HealthIncident
type HealthIncident struct {
	// The start date of the incident, in ISO 8601 format, e.g. `\"2020-10-30T15:26:48Z\"`.
	StartDate NullableString `json:"start_date,omitempty"`
	// The end date of the incident, in ISO 8601 format, e.g. `\"2020-10-30T15:26:48Z\"`.
	EndDate NullableString `json:"end_date,omitempty"`
	// The title of the incident
	Title *string `json:"title,omitempty"`
	// Updates on the health incident.
	IncidentUpdates *[]IncidentUpdate `json:"incident_updates,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HealthIncident HealthIncident

// NewHealthIncident instantiates a new HealthIncident object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthIncident() *HealthIncident {
	this := HealthIncident{}
	return &this
}

// NewHealthIncidentWithDefaults instantiates a new HealthIncident object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthIncidentWithDefaults() *HealthIncident {
	this := HealthIncident{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthIncident) GetStartDate() string {
	if o == nil || o.StartDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthIncident) GetStartDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *HealthIncident) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableString and assigns it to the StartDate field.
func (o *HealthIncident) SetStartDate(v string) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *HealthIncident) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *HealthIncident) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HealthIncident) GetEndDate() string {
	if o == nil || o.EndDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HealthIncident) GetEndDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *HealthIncident) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *HealthIncident) SetEndDate(v string) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *HealthIncident) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *HealthIncident) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *HealthIncident) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthIncident) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *HealthIncident) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *HealthIncident) SetTitle(v string) {
	o.Title = &v
}

// GetIncidentUpdates returns the IncidentUpdates field value if set, zero value otherwise.
func (o *HealthIncident) GetIncidentUpdates() []IncidentUpdate {
	if o == nil || o.IncidentUpdates == nil {
		var ret []IncidentUpdate
		return ret
	}
	return *o.IncidentUpdates
}

// GetIncidentUpdatesOk returns a tuple with the IncidentUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthIncident) GetIncidentUpdatesOk() (*[]IncidentUpdate, bool) {
	if o == nil || o.IncidentUpdates == nil {
		return nil, false
	}
	return o.IncidentUpdates, true
}

// HasIncidentUpdates returns a boolean if a field has been set.
func (o *HealthIncident) HasIncidentUpdates() bool {
	if o != nil && o.IncidentUpdates != nil {
		return true
	}

	return false
}

// SetIncidentUpdates gets a reference to the given []IncidentUpdate and assigns it to the IncidentUpdates field.
func (o *HealthIncident) SetIncidentUpdates(v []IncidentUpdate) {
	o.IncidentUpdates = &v
}

func (o HealthIncident) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.IncidentUpdates != nil {
		toSerialize["incident_updates"] = o.IncidentUpdates
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HealthIncident) UnmarshalJSON(bytes []byte) (err error) {
	varHealthIncident := _HealthIncident{}

	if err = json.Unmarshal(bytes, &varHealthIncident); err == nil {
		*o = HealthIncident(varHealthIncident)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "end_date")
		delete(additionalProperties, "title")
		delete(additionalProperties, "incident_updates")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHealthIncident struct {
	value *HealthIncident
	isSet bool
}

func (v NullableHealthIncident) Get() *HealthIncident {
	return v.value
}

func (v *NullableHealthIncident) Set(val *HealthIncident) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthIncident) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthIncident) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthIncident(val *HealthIncident) *NullableHealthIncident {
	return &NullableHealthIncident{value: val, isSet: true}
}

func (v NullableHealthIncident) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthIncident) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


